generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Environment {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  active      Boolean      @default(true)
  createdBy   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  EnvAccess   EnvAccess[]
  EnvManager  EnvManager[]
}

model EnvAccess {
  id            String      @id @default(uuid())
  startPeriod   DateTime    @default(now())
  endPeriod     DateTime
  active        Boolean     @default(true)
  userId        String
  // createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environmentId String
  Environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  Access        Access[]

  @@unique([userId, environmentId])
}

model Access {
  id           String      @id @default(uuid())
  day          Int
  startTime    DateTime
  endTime      DateTime
  envAccessId  String?
  EnvAccess    EnvAccess?  @relation(fields: [envAccessId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  EnvManager   EnvManager? @relation(fields: [envManagerId], references: [id]) // onDelete: Cascade
  envManagerId String?
  active       Boolean     @default(true)

  @@unique([day, startTime, endTime, envAccessId])
}

model EnvManager {
  id            String      @id @default(uuid())
  active        Boolean     @default(true)
  userId        String
  // createdBy     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environmentId String
  Environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  Access        Access[]

  @@unique([userId, environmentId])
}
